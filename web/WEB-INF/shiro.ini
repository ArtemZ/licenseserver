[main]

# Let's use some in-memory caching to reduce the number of runtime lookups against Stormpath.
# A real application might want to use a more robust caching solution (e.g. ehcache or a
# distributed cache).  When using such caches, be aware of your cache TTL settings: too high
# a TTL and the cache won't reflect any potential changes in Stormpath fast enough.  Too low
# and the cache could evict too often, reducing performance.
cacheManager = org.apache.shiro.cache.MemoryConstrainedCacheManager
securityManager.cacheManager = $cacheManager

#Shiro JDBC Realm
jdbcRealm=org.apache.shiro.realm.jdbc.JdbcRealm
#jdbcRealm.permissionsLookupEnabled=false
# If not filled, subclasses of JdbcRealm assume "select password from users where username = ?"
jdbcRealm.authenticationQuery = select password from users where login = ?
# If not filled, subclasses of JdbcRealm assume "select role_name from user_roles where username = ?"
jdbcRealm.userRolesQuery = select users_roles.role_name from users_roles join users on (users.login = ?)
#jdbcRealm.userRolesQuery = select role_name from users_roles where user_name = ?

#ds = com.jolbox.bonecp.BoneCPDataSource
ds = net.netdedicated.db.ShiroBoneCPDataSource
jdbcRealm.dataSource = $ds
#jdbcRealm.dataSource = net.netdedicated.db.ShiroBoneCPDataSource

authc.loginUrl = /login.jsp
user.loginUrl = /login.jsp

[urls]
/license/apicreate = authcBasic
/license/apidelete = authcBasic
/license/apilicense = authcBasic
/license/encoded = anon
/license = anon
/** = authc